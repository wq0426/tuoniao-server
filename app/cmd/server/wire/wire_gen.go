// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package wire

import (
	"app/internal/handler"
	"app/internal/repository"
	"app/internal/server"
	"app/internal/service"
	"app/pkg/app"
	"app/pkg/jwt"
	"app/pkg/log"
	"app/pkg/server/http"
	"app/pkg/sid"
	"github.com/google/wire"
	"github.com/spf13/viper"
)

// Injectors from wire.go:

func NewWire(viperViper *viper.Viper, logger *log.Logger) (*app.App, func(), error) {
	jwtJWT := jwt.NewJwt(viperViper)
	handlerHandler := handler.NewHandler(logger)
	v := repository.NewDB(viperViper, logger)
	repositoryRepository := repository.NewRepository(logger, v)
	transaction := repository.NewTransaction(repositoryRepository)
	sidSid := sid.NewSid()
	serviceService := service.NewService(transaction, logger, sidSid, jwtJWT)
	settingsRepository := repository.NewSettingsRepository(repositoryRepository)
	userAssetRecordRepository := repository.NewUserAssetRecordRepository(repositoryRepository)
	userAssetRepository := repository.NewUserAssetRepository(repositoryRepository, userAssetRecordRepository)
	userCouponRepository := repository.NewUserCouponRepository(repositoryRepository)
	accountRepository := repository.NewAccountRepository(repositoryRepository, settingsRepository)
	userAssetService := service.NewUserAssetService(serviceService, userAssetRepository, userCouponRepository, userAssetRecordRepository, accountRepository)
	userAssetHandler := handler.NewUserAssetHandler(handlerHandler, userAssetService)
	accountService := service.NewAccountService(serviceService, accountRepository, userAssetRepository, userCouponRepository, settingsRepository)
	accountHandler := handler.NewAccountHandler(handlerHandler, accountService)
	resourceRepository := repository.NewResourceRepository(repositoryRepository)
	resourceService := service.NewResourceService(serviceService, resourceRepository)
	resourceHandler := handler.NewResourceHandler(handlerHandler, resourceService)
	settingsService := service.NewSettingsService(serviceService, settingsRepository, accountRepository)
	settingsHandler := handler.NewSettingsHandler(handlerHandler, settingsService)
	smsService := service.NewSmsService(serviceService)
	smsHandler := handler.NewSmsHandler(handlerHandler, smsService)
	bannerRepository := repository.NewBannerRepository(repositoryRepository)
	bannerService := service.NewBannerService(serviceService, bannerRepository)
	bannerHandler := handler.NewBannerHandler(handlerHandler, bannerService)
	monitorRepository := repository.NewMonitorRepository(repositoryRepository)
	monitorService := service.NewMonitorService(serviceService, monitorRepository)
	monitorHandler := handler.NewMonitorHandler(handlerHandler, monitorService)
	newsRepository := repository.NewNewsRepository(repositoryRepository)
	newsService := service.NewNewsService(serviceService, newsRepository)
	newsHandler := handler.NewNewsHandler(handlerHandler, newsService)
	productRepository := repository.NewProductRepository(repositoryRepository)
	productService := service.NewProductService(serviceService, productRepository)
	productHandler := handler.NewProductHandler(handlerHandler, productService)
	freeMarketMineRepository := repository.NewFreeMarketMineRepository(repositoryRepository)
	freeMarketMineService := service.NewFreeMarketMineService(serviceService, freeMarketMineRepository)
	freeMarketMineHandler := handler.NewFreeMarketMineHandler(handlerHandler, freeMarketMineService)
	userCartRepository := repository.NewUserCartRepository(repositoryRepository)
	userCartService := service.NewUserCartService(serviceService, userCartRepository)
	userCartHandler := handler.NewUserCartHandler(handlerHandler, userCartService)
	userOrderRepository := repository.NewUserOrderRepository(repositoryRepository, userCartRepository, userAssetRepository)
	userOrderService := service.NewUserOrderService(serviceService, userOrderRepository)
	userOrderHandler := handler.NewUserOrderHandler(handlerHandler, userOrderService)
	userAddressRepository := repository.NewUserAddressRepository(repositoryRepository)
	userAddressService := service.NewUserAddressService(serviceService, userAddressRepository)
	userAddressHandler := handler.NewUserAddressHandler(handlerHandler, userAddressService)
	userCouponService := service.NewUserCouponService(serviceService, userCouponRepository)
	userCouponHandler := handler.NewUserCouponHandler(handlerHandler, userCouponService)
	pointExchangeConfigRepository := repository.NewPointExchangeConfigRepository(repositoryRepository)
	pointExchangeConfigService := service.NewPointExchangeConfigService(serviceService, pointExchangeConfigRepository)
	pointExchangeConfigHandler := handler.NewPointExchangeConfigHandler(handlerHandler, pointExchangeConfigService)
	refundOrderRepository := repository.NewRefundOrderRepository(repositoryRepository)
	refundOrderService := service.NewRefundOrderService(serviceService, refundOrderRepository)
	refundOrderHandler := handler.NewRefundOrderHandler(handlerHandler, refundOrderService)
	withdrawOrderRepository := repository.NewWithdrawOrderRepository(repositoryRepository)
	withdrawOrderService := service.NewWithdrawOrderService(serviceService, withdrawOrderRepository)
	withdrawOrderHandler := handler.NewWithdrawOrderHandler(handlerHandler, withdrawOrderService)
	productReviewRepository := repository.NewProductReviewRepository(repositoryRepository)
	productReviewService := service.NewProductReviewService(serviceService, productReviewRepository)
	productReviewHandler := handler.NewProductReviewHandler(handlerHandler, productReviewService)
	productEvaluateRepository := repository.NewProductEvaluateRepository(repositoryRepository)
	productEvaluateService := service.NewProductEvaluateService(serviceService, productEvaluateRepository)
	productEvaluateHandler := handler.NewProductEvaluateHandler(handlerHandler, productEvaluateService)
	userEarningRepository := repository.NewUserEarningRepository(repositoryRepository)
	userEarningService := service.NewUserEarningService(serviceService, userEarningRepository)
	userEarningHandler := handler.NewUserEarningHandler(handlerHandler, userEarningService)
	httpServer := server.NewHTTPServer(logger, viperViper, jwtJWT, accountHandler, resourceHandler, 
		settingsHandler, smsHandler, bannerHandler, monitorHandler, 
		newsHandler, productHandler, freeMarketMineHandler, userCartHandler, userOrderHandler, 
		userAddressHandler, userAssetHandler, userCouponHandler, pointExchangeConfigHandler, refundOrderHandler, withdrawOrderHandler, productReviewHandler, productEvaluateHandler, userEarningHandler)
	job := server.NewJob(logger)
	appApp := newApp(httpServer, job)
	return appApp, func() {
	}, nil
}

// wire.go:

var repositorySet = wire.NewSet(repository.NewDB, repository.NewRepository, repository.NewTransaction, 
	 repository.NewAccountRepository, repository.NewSettingsRepository, 
	repository.NewResourceRepository, repository.NewUserAssetRepository, repository.NewUserAssetRecordRepository, 
	repository.NewUserCouponRepository)

var serviceSet = wire.NewSet(service.NewService, service.NewAccountService, service.NewSettingsService, service.NewResourceService)

var handlerSet = wire.NewSet(handler.NewHandler, handler.NewAccountHandler, handler.NewSettingsHandler, handler.NewResourceHandler)

var serverSet = wire.NewSet(server.NewHTTPServer, server.NewJob)

// build App
func newApp(
	httpServer *http.Server,
	job *server.Job,
) *app.App {
	return app.NewApp(app.WithServer(httpServer, job), app.WithName("demo-server"))
}
