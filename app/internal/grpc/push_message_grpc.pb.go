// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.4
// source: internal/grpc/push_message.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	PushMessageService_StreamMessages_FullMethodName = "/grpc.PushMessageService/StreamMessages"
)

// PushMessageServiceClient is the client API for PushMessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PushMessageServiceClient interface {
	StreamMessages(ctx context.Context, opts ...grpc.CallOption) (PushMessageService_StreamMessagesClient, error)
}

type pushMessageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushMessageServiceClient(cc grpc.ClientConnInterface) PushMessageServiceClient {
	return &pushMessageServiceClient{cc}
}

func (c *pushMessageServiceClient) StreamMessages(ctx context.Context, opts ...grpc.CallOption) (PushMessageService_StreamMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PushMessageService_ServiceDesc.Streams[0], PushMessageService_StreamMessages_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &pushMessageServiceStreamMessagesClient{stream}
	return x, nil
}

type PushMessageService_StreamMessagesClient interface {
	Send(*PushMessageRequest) error
	Recv() (*PushMessageResponse, error)
	grpc.ClientStream
}

type pushMessageServiceStreamMessagesClient struct {
	grpc.ClientStream
}

func (x *pushMessageServiceStreamMessagesClient) Send(m *PushMessageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *pushMessageServiceStreamMessagesClient) Recv() (*PushMessageResponse, error) {
	m := new(PushMessageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PushMessageServiceServer is the server API for PushMessageService service.
// All implementations must embed UnimplementedPushMessageServiceServer
// for forward compatibility
type PushMessageServiceServer interface {
	StreamMessages(PushMessageService_StreamMessagesServer) error
	mustEmbedUnimplementedPushMessageServiceServer()
}

// UnimplementedPushMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPushMessageServiceServer struct {
}

func (UnimplementedPushMessageServiceServer) StreamMessages(PushMessageService_StreamMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamMessages not implemented")
}
func (UnimplementedPushMessageServiceServer) mustEmbedUnimplementedPushMessageServiceServer() {}

// UnsafePushMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushMessageServiceServer will
// result in compilation errors.
type UnsafePushMessageServiceServer interface {
	mustEmbedUnimplementedPushMessageServiceServer()
}

func RegisterPushMessageServiceServer(s grpc.ServiceRegistrar, srv PushMessageServiceServer) {
	s.RegisterService(&PushMessageService_ServiceDesc, srv)
}

func _PushMessageService_StreamMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushMessageServiceServer).StreamMessages(&pushMessageServiceStreamMessagesServer{stream})
}

type PushMessageService_StreamMessagesServer interface {
	Send(*PushMessageResponse) error
	Recv() (*PushMessageRequest, error)
	grpc.ServerStream
}

type pushMessageServiceStreamMessagesServer struct {
	grpc.ServerStream
}

func (x *pushMessageServiceStreamMessagesServer) Send(m *PushMessageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *pushMessageServiceStreamMessagesServer) Recv() (*PushMessageRequest, error) {
	m := new(PushMessageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PushMessageService_ServiceDesc is the grpc.ServiceDesc for PushMessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushMessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.PushMessageService",
	HandlerType: (*PushMessageServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamMessages",
			Handler:       _PushMessageService_StreamMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "internal/grpc/push_message.proto",
}
